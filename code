import pandas as pd
import plotly.express as px
from dash import Dash, dcc, html, Input, Output
url = "https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv"
# Load the dataset
df = pd.read_csv(url)

# Initialize the Dash app
app = Dash(__name__)
app.title = 'Automobile Sales Dashboard'

# Layout (Tasks 2.1, 2.2, 2.3)
app.layout = html.Div([
    html.H1('Automobile Sales Dashboard', style={'textAlign': 'center'}),

    html.Div([
        html.Label('Select Report Type:'),
        dcc.Dropdown(
            id='report-type',
            options=[
                {'label': 'Recession Report', 'value': 'recession'},
                {'label': 'Yearly Report', 'value': 'yearly'}
            ],
            value='recession',
            clearable=False
        )
    ], style={'width': '48%', 'display': 'inline-block'}),

    html.Div([
        html.Label('Select Vehicle Type:'),
        dcc.Dropdown(
            id='vehicle-type',
            options=[{'label': vt, 'value': vt} for vt in df['Vehicle_Type'].dropna().unique()],
            value='Passenger',
            clearable=False
        )
    ], style={'width': '48%', 'display': 'inline-block', 'float': 'right'}),

    html.Br(),
    html.Div(id='output-container', className='graph-container')
])

# Callback (Tasks 2.4, 2.5, 2.6)
@app.callback(
    Output('output-container', 'children'),
    Input('report-type', 'value'),
    Input('vehicle-type', 'value')
)
def update_output(report_type, vehicle_type):
    if report_type == 'recession':
        df_filtered = df[(df['Recession'] == 1) & (df['Vehicle_Type'] == vehicle_type)]

        if df_filtered.empty:
            return html.Div([
                html.H3(f'No data found for "{vehicle_type}" during a recession.', style={'color': 'red'})
            ])

        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',
                            title=f'{vehicle_type} Sales During Recession')

        gdp_fig = px.line(df_filtered, x='Year', y='GDP',
                          title='GDP During Recession')

        return html.Div([
            dcc.Graph(figure=sales_fig),
            dcc.Graph(figure=gdp_fig)
        ])

    else:
        df_filtered = df[df['Vehicle_Type'] == vehicle_type]

        if df_filtered.empty:
            return html.Div([
                html.H3(f'No yearly data available for "{vehicle_type}".', style={'color': 'red'})
            ])

        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',
                            title=f'{vehicle_type} Sales Yearly')

        price_fig = px.scatter(df_filtered, x='Price', y='Automobile_Sales',
                               title='Price vs Sales')

        return html.Div([
            dcc.Graph(figure=sales_fig),
            dcc.Graph(figure=price_fig)
        ])


# Run the app (adjust for Jupyter or script usage)
if __name__ == '__main__':
    app.run(debug=True)
