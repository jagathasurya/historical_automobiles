{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "ed9e8096-8f84-4c7c-9935-be19a697a06a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1a32303d760>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv\"\n",
    "# Load the dataset\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Initialize the Dash app\n",
    "app = Dash(__name__)\n",
    "app.title = 'Automobile Sales Dashboard'\n",
    "\n",
    "# Layout (Tasks 2.1, 2.2, 2.3)\n",
    "app.layout = html.Div([\n",
    "    html.H1('Automobile Sales Dashboard', style={'textAlign': 'center'}),\n",
    "\n",
    "    html.Div([\n",
    "        html.Label('Select Report Type:'),\n",
    "        dcc.Dropdown(\n",
    "            id='report-type',\n",
    "            options=[\n",
    "                {'label': 'Recession Report', 'value': 'recession'},\n",
    "                {'label': 'Yearly Report', 'value': 'yearly'}\n",
    "            ],\n",
    "            value='recession',\n",
    "            clearable=False\n",
    "        )\n",
    "    ], style={'width': '48%', 'display': 'inline-block'}),\n",
    "\n",
    "    html.Div([\n",
    "        html.Label('Select Vehicle Type:'),\n",
    "        dcc.Dropdown(\n",
    "            id='vehicle-type',\n",
    "            options=[{'label': vt, 'value': vt} for vt in df['Vehicle_Type'].dropna().unique()],\n",
    "            value='Passenger',\n",
    "            clearable=False\n",
    "        )\n",
    "    ], style={'width': '48%', 'display': 'inline-block', 'float': 'right'}),\n",
    "\n",
    "    html.Br(),\n",
    "    html.Div(id='output-container', className='graph-container')\n",
    "])\n",
    "\n",
    "# Callback (Tasks 2.4, 2.5, 2.6)\n",
    "@app.callback(\n",
    "    Output('output-container', 'children'),\n",
    "    Input('report-type', 'value'),\n",
    "    Input('vehicle-type', 'value')\n",
    ")\n",
    "def update_output(report_type, vehicle_type):\n",
    "    if report_type == 'recession':\n",
    "        df_filtered = df[(df['Recession'] == 1) & (df['Vehicle_Type'] == vehicle_type)]\n",
    "\n",
    "        if df_filtered.empty:\n",
    "            return html.Div([\n",
    "                html.H3(f'No data found for \"{vehicle_type}\" during a recession.', style={'color': 'red'})\n",
    "            ])\n",
    "\n",
    "        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',\n",
    "                            title=f'{vehicle_type} Sales During Recession')\n",
    "\n",
    "        gdp_fig = px.line(df_filtered, x='Year', y='GDP',\n",
    "                          title='GDP During Recession')\n",
    "\n",
    "        return html.Div([\n",
    "            dcc.Graph(figure=sales_fig),\n",
    "            dcc.Graph(figure=gdp_fig)\n",
    "        ])\n",
    "\n",
    "    else:\n",
    "        df_filtered = df[df['Vehicle_Type'] == vehicle_type]\n",
    "\n",
    "        if df_filtered.empty:\n",
    "            return html.Div([\n",
    "                html.H3(f'No yearly data available for \"{vehicle_type}\".', style={'color': 'red'})\n",
    "            ])\n",
    "\n",
    "        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',\n",
    "                            title=f'{vehicle_type} Sales Yearly')\n",
    "\n",
    "        price_fig = px.scatter(df_filtered, x='Price', y='Automobile_Sales',\n",
    "                               title='Price vs Sales')\n",
    "\n",
    "        return html.Div([\n",
    "            dcc.Graph(figure=sales_fig),\n",
    "            dcc.Graph(figure=price_fig)\n",
    "        ])\n",
    "\n",
    "\n",
    "# Run the app (adjust for Jupyter or script usage)\n",
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "080b7965-124d-4819-9e85-78d6136de28d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import plotly.express as px\n",
    "from dash import Dash, dcc, html, Input, Output\n",
    "url = \"https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-DV0101EN-SkillsNetwork/Data%20Files/historical_automobile_sales.csv\"\n",
    "# Load the dataset\n",
    "df = pd.read_csv(url)\n",
    "\n",
    "# Initialize the Dash app\n",
    "app = Dash(__name__)\n",
    "app.title = 'Automobile Sales Dashboard'\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "8a08f3e1-e50c-4fc9-b883-648473c5ca16",
   "metadata": {},
   "outputs": [],
   "source": [
    "app.layout = html.Div([\n",
    "    html.H1('Automobile Sales Dashboard', style={'textAlign': 'center'}),\n",
    "\n",
    "    html.Div([\n",
    "        html.Label('Select Report Type:'),\n",
    "        dcc.Dropdown(\n",
    "            id='report-type',\n",
    "            options=[\n",
    "                {'label': 'Recession Report', 'value': 'recession'},\n",
    "                {'label': 'Yearly Report', 'value': 'yearly'}\n",
    "            ],\n",
    "            value='recession',\n",
    "            clearable=False\n",
    "        )\n",
    "    ], style={'width': '48%', 'display': 'inline-block'}),\n",
    "\n",
    "    html.Div([\n",
    "        html.Label('Select Vehicle Type:'),\n",
    "        dcc.Dropdown(\n",
    "            id='vehicle-type',\n",
    "            options=[{'label': vt, 'value': vt} for vt in df['Vehicle_Type'].dropna().unique()],\n",
    "            value='Passenger',\n",
    "            clearable=False\n",
    "        )\n",
    "    ], style={'width': '48%', 'display': 'inline-block', 'float': 'right'}),\n",
    "\n",
    "    html.Br(),\n",
    "    html.Div(id='output-container', className='graph-container')\n",
    "])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "bd5c981e-da05-44bc-ba2b-85df6ee08b88",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Div(id='output-container', className='graph-container')"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "  html.Div(id='output-container', className='graph-container')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "6521ec1e-9e2b-4890-947c-011cc8b6b49e",
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.callback(\n",
    "    Output('output-container', 'children'),\n",
    "    Input('report-type', 'value'),\n",
    "    Input('vehicle-type', 'value')\n",
    ")\n",
    "def update_output(report_type, vehicle_type):\n",
    "    if report_type == 'recession':\n",
    "        # Recession Report (Task 2.5)\n",
    "        df_filtered = df[(df['Recession'] == 1) & (df['Vehicle_Type'] == vehicle_type)]\n",
    "        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',\n",
    "                            title=f'{vehicle_type} Sales During Recession')\n",
    "        gdp_fig = px.line(df_filtered, x='Year', y='GDP',\n",
    "                          title='GDP During Recession')\n",
    "        return html.Div([\n",
    "            dcc.Graph(figure=sales_fig),\n",
    "            dcc.Graph(figure=gdp_fig)\n",
    "        ])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "d18c8225-ab12-48a0-b706-db40400902ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "@app.callback(\n",
    "    Output('output-container', 'children'),\n",
    "    Input('report-type', 'value'),\n",
    "    Input('vehicle-type', 'value')\n",
    ")\n",
    "def update_output(report_type, vehicle_type):\n",
    "    if report_type == 'recession':\n",
    "        # Recession Report (Task 2.5)\n",
    "        df_filtered = df[(df['Recession'] == 1) & (df['Vehicle_Type'] == vehicle_type)]\n",
    "        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',\n",
    "                            title=f'{vehicle_type} Sales During Recession')\n",
    "        gdp_fig = px.line(df_filtered, x='Year', y='GDP',\n",
    "                          title='GDP During Recession')\n",
    "        return html.Div([\n",
    "            dcc.Graph(figure=sales_fig),\n",
    "            dcc.Graph(figure=gdp_fig)\n",
    "        ])\n",
    "    else:\n",
    "        # Yearly Report (Task 2.6)\n",
    "        df_filtered = df[df['Vehicle_Type'] == vehicle_type]\n",
    "        sales_fig = px.line(df_filtered, x='Year', y='Automobile_Sales',\n",
    "                            title=f'{vehicle_type} Sales Yearly')\n",
    "        price_fig = px.scatter(df_filtered, x='Price', y='Automobile_Sales',\n",
    "                               title='Price vs Sales')\n",
    "        return html.Div([\n",
    "            dcc.Graph(figure=sales_fig),\n",
    "            dcc.Graph(figure=price_fig)\n",
    "        ])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "2c88ab1f-a273-4461-8497-289a5105bbc6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "\n",
       "        <iframe\n",
       "            width=\"100%\"\n",
       "            height=\"650\"\n",
       "            src=\"http://127.0.0.1:8050/\"\n",
       "            frameborder=\"0\"\n",
       "            allowfullscreen\n",
       "            \n",
       "        ></iframe>\n",
       "        "
      ],
      "text/plain": [
       "<IPython.lib.display.IFrame at 0x1a33bfd2b10>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "    app.run(debug=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "57211f1b-06a2-496b-a4c2-e852a10d6f60",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
